# Specify version format
version: "0.18.{build}"

# Operating system (build VM template)
os: Visual Studio 2015

# build platform, i.e. Win32 (instead of x86), x64, Any CPU. This setting is optional.
platform: 
  - Win32
  - x64

# specify custom environment variables
environment:
  MSVC_DEFAULT_OPTIONS: ON
  BOOST_ROOT: C:\Libraries\boost_1_59_0
  BOOST_LIBRARYDIR_WIN32: C:\Libraries\boost_1_59_0\lib32-msvc-14.0
  BOOST_LIBRARYDIR_WIN64: C:\Libraries\boost_1_59_0\lib64-msvc-14.0
  SEC_ACCESS_TOKEN:
        secure: RFA6IqkmxScQjpbDusK10h7w6kgragC5u5L7DHNAyEqCvGfs2InqB9GNeTk4b6nm

# build configuration, i.e. Debug, Release, etc.
configuration:
  - Debug
  - Release

# scripts that are called at very beginning, before repo cloning
#init:
#  - cmd: cmake --version
#  - cmd: msbuild /version

# clone directory
clone_folder: C:\projects\avtest

# branches to build
branches:
  # whitelist
  only: 
    - master
    
# Do not build on tags (GitHub only)
skip_tags: true


# scripts that run after cloning repository
#install:

# scripts to run before build
before_build:
  - cmd: if "%platform%"=="Win32" set BOOST_LIBRARYDIR="%BOOST_LIBRARYDIR_WIN32%"
  - cmd: if "%platform%"=="x64" set BOOST_LIBRARYDIR=%BOOST_LIBRARYDIR_x64%
  
build:
  project: C:\projects\avtest\win\avtest.sln              # path to Visual Studio solution or project
  parallel: true                                          # enable MSBuild parallel builds
  verbosity: quiet                                        # MSBuild verbosity level (quiet|minimal|normal|detailed)

test: off

#after_build:

artifacts:
  - path: bin\$(platform)_$(configuration)
    name: $(APPVEYOR_PROJECT_NAME)_$(platform)_$(configuration)

# Deploy to GitHub Releases http://www.appveyor.com/docs/deployment/github
# http://www.appveyor.com/docs/branches
# AppVeyor sets APPVEYOR_REPO_TAG environment variable to distinguish regular
# commits from tags - the value is True if tag was pushed; otherwise it's
# False.  When it's True the name of tag is stored in APPVEYOR_REPO_TAG_NAME.

# scripts to run before deployment
before_deploy:
    ps: |
        $env:COMMIT_DATE=get-date $env:APPVEYOR_REPO_COMMIT_TIMESTAMP -format  "dd-MM-yyyy HH:mm";
        function Delete-Github-Release($gitHubRepository, $releaseVersion, $commitHash, $token)
        {
            echo $gitHubRepository;
            echo $releaseVersion;
            echo $commitHash;
            $baseReleaseUrl = "https://api.github.com/repos/$gitHubRepository/releases";
            $ref_endpoint = "https://api.github.com/repos/$gitHubRepository/git/refs/tags"
            $getReleaseId = @{
            Uri = "$baseReleaseUrl/tags/$releaseVersion"
            Method = "GET"
            }
        
            $wr_error = 'True';
            try
            {
                $result = Invoke-WebRequest @getReleaseId;
            }
            catch
            {
                $wr_error = 'False';
            }
        
            echo $result.StatusCode;
            
            if ($result.StatusCode -ne 200 -or $wr_error -eq 'False')
            {
                Write-Host "ERROR CANNOT FIND TAG $releaseVersion" -f Red;
                return;
            }
            else
            {
                Write-Host "Found TAG $releaseVersion" -f Green;
            }
        
            $tagData = ConvertFrom-Json $result.Content;
            echo $tagData;
        
            $deleteAll = 'False';
            if ($tagData.target_commitish -ne $commitHash)
            {
                $assets = $tagData.assets;
                foreach ($assetItr in $assets)
                {
                    $id = $assetItr.id;
                    $relName = $assetItr.name;
        
                    $delbaseReleaseUrl = "$baseReleaseUrl/$id" + "?access_token=$token"
                    echo $delbaseReleaseUrl;
                    Write-Host "Deleting release artifact $relName..." -f Yellow;
        
                    $delReleaseParams = @{
                        Uri = $baseReleaseUrl
                        Method = "DELETE"
                    }
        
                    $wr_error = 'True';
                    try
                    {
                        #$delRelResult = Invoke-WebRequest @delReleaseParams;
                    }
                    catch
                    {
                        $wr_error = 'False';
                    }
        
                    if ($wr_error -eq 'False' -or $delRelResult.StatusCode -eq 204)
                    {
                        Write-Host "$relName is deleted" -f Green
                    }
                    else
                    {
                        Write-Host "ERROR cannot delete $relName" -f Red
                    }
                }
        
                Write-Host "Deleting release tag $releaseVersion..." -f Yellow;
                $delTagBaseUrl = "$ref_endpoint/$releaseVersion?access_token=$token";
                $delTagParams = @{
                    Uri = $delTagBaseUrl
                    Method = "DELETE"
                }
        
                echo $delTagBaseUrl;
                $wr_error = 'True';
                try
                {
                    #$delTagResult = Invoke-WebRequest @delTagParams;
                }
                catch
                {
                    $wr_error = 'False';
                }
        
                if ($wr_error -eq 'False' -or $delTagResult.StatusCode -eq 204)
                {
                    Write-Host "$releaseVersion is deleted" -f Green
                }
                else
                {
                    Write-Host "ERROR cannot delete $releaseVersion" -f Red
                }
        
                break;
            }
        }
        $buildName = "Last_" + "$env:platform" + "_" + "$env:configuration" + "_build"
        Delete-Github-Release $env:APPVEYOR_REPO_NAME $buildName $env:APPVEYOR_REPO_COMMIT "$env:SEC_ACCESS_TOKEN"

deploy:
  - provider: GitHub
    auth_token:
      secure: RFA6IqkmxScQjpbDusK10h7w6kgragC5u5L7DHNAyEqCvGfs2InqB9GNeTk4b6nm
    release: 'Last_$(platform)_$(configuration)_build' # name of the tag used
    #release: $(appveyor_repo_tag_name)
    description: 'Binaries of commit $(APPVEYOR_REPO_COMMIT) \n$(APPVEYOR_REPO_COMMIT_MESSAGE)\nCommit date $(COMMIT_DATE)'
    # github automatically does source zip/tarball for us
    artifact: $(APPVEYOR_PROJECT_NAME)_$(platform)_$(configuration)
    draft: false
    force_update: true # if release already exist force the details update
    prerelease: true
    on:
      branch: master                # release from master branch only
      appveyor_repo_tag: false      # deploy on tag push only
      
